// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank_account.proto

#include "bank_account.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace BankAccount {
constexpr bankAccount::bankAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ssn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_num_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_opened_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_(0){}
struct bankAccountDefaultTypeInternal {
  constexpr bankAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~bankAccountDefaultTypeInternal() {}
  union {
    bankAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT bankAccountDefaultTypeInternal _bankAccount_default_instance_;
constexpr Bank::Bank(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_(){}
struct BankDefaultTypeInternal {
  constexpr BankDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BankDefaultTypeInternal() {}
  union {
    Bank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BankDefaultTypeInternal _Bank_default_instance_;
}  // namespace BankAccount
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bank_5faccount_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bank_5faccount_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bank_5faccount_2eproto = nullptr;

const uint32_t TableStruct_bank_5faccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BankAccount::bankAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BankAccount::bankAccount, name_),
  PROTOBUF_FIELD_OFFSET(::BankAccount::bankAccount, ssn_),
  PROTOBUF_FIELD_OFFSET(::BankAccount::bankAccount, account_num_),
  PROTOBUF_FIELD_OFFSET(::BankAccount::bankAccount, date_opened_),
  PROTOBUF_FIELD_OFFSET(::BankAccount::bankAccount, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BankAccount::Bank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BankAccount::Bank, accounts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::BankAccount::bankAccount)},
  { 11, -1, -1, sizeof(::BankAccount::Bank)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BankAccount::_bankAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BankAccount::_Bank_default_instance_),
};

const char descriptor_table_protodef_bank_5faccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022bank_account.proto\022\013BankAccount\"c\n\013ban"
  "kAccount\022\014\n\004name\030\001 \001(\t\022\013\n\003ssn\030\002 \001(\t\022\023\n\013a"
  "ccount_num\030\003 \001(\t\022\023\n\013date_opened\030\004 \001(\t\022\017\n"
  "\007balance\030\005 \001(\005\"2\n\004Bank\022*\n\010accounts\030\001 \003(\013"
  "2\030.BankAccount.bankAccountb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bank_5faccount_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bank_5faccount_2eproto = {
  false, false, 194, descriptor_table_protodef_bank_5faccount_2eproto, "bank_account.proto", 
  &descriptor_table_bank_5faccount_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_bank_5faccount_2eproto::offsets,
  file_level_metadata_bank_5faccount_2eproto, file_level_enum_descriptors_bank_5faccount_2eproto, file_level_service_descriptors_bank_5faccount_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_bank_5faccount_2eproto_getter() {
  return &descriptor_table_bank_5faccount_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bank_5faccount_2eproto(&descriptor_table_bank_5faccount_2eproto);
namespace BankAccount {

// ===================================================================

class bankAccount::_Internal {
 public:
};

bankAccount::bankAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BankAccount.bankAccount)
}
bankAccount::bankAccount(const bankAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssn().empty()) {
    ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssn(), 
      GetArenaForAllocation());
  }
  account_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_num().empty()) {
    account_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_num(), 
      GetArenaForAllocation());
  }
  date_opened_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    date_opened_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_date_opened().empty()) {
    date_opened_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_opened(), 
      GetArenaForAllocation());
  }
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:BankAccount.bankAccount)
}

inline void bankAccount::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ssn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
date_opened_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  date_opened_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
balance_ = 0;
}

bankAccount::~bankAccount() {
  // @@protoc_insertion_point(destructor:BankAccount.bankAccount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void bankAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_opened_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bankAccount::ArenaDtor(void* object) {
  bankAccount* _this = reinterpret_cast< bankAccount* >(object);
  (void)_this;
}
void bankAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bankAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void bankAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:BankAccount.bankAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ssn_.ClearToEmpty();
  account_num_.ClearToEmpty();
  date_opened_.ClearToEmpty();
  balance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bankAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BankAccount.bankAccount.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ssn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ssn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BankAccount.bankAccount.ssn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string account_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BankAccount.bankAccount.account_num"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string date_opened = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_date_opened();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BankAccount.bankAccount.date_opened"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* bankAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankAccount.bankAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BankAccount.bankAccount.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string ssn = 2;
  if (!this->_internal_ssn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssn().data(), static_cast<int>(this->_internal_ssn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BankAccount.bankAccount.ssn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ssn(), target);
  }

  // string account_num = 3;
  if (!this->_internal_account_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account_num().data(), static_cast<int>(this->_internal_account_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BankAccount.bankAccount.account_num");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account_num(), target);
  }

  // string date_opened = 4;
  if (!this->_internal_date_opened().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_opened().data(), static_cast<int>(this->_internal_date_opened().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BankAccount.bankAccount.date_opened");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_date_opened(), target);
  }

  // int32 balance = 5;
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankAccount.bankAccount)
  return target;
}

size_t bankAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankAccount.bankAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ssn = 2;
  if (!this->_internal_ssn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssn());
  }

  // string account_num = 3;
  if (!this->_internal_account_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account_num());
  }

  // string date_opened = 4;
  if (!this->_internal_date_opened().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_opened());
  }

  // int32 balance = 5;
  if (this->_internal_balance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData bankAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    bankAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*bankAccount::GetClassData() const { return &_class_data_; }

void bankAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<bankAccount *>(to)->MergeFrom(
      static_cast<const bankAccount &>(from));
}


void bankAccount::MergeFrom(const bankAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankAccount.bankAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_ssn().empty()) {
    _internal_set_ssn(from._internal_ssn());
  }
  if (!from._internal_account_num().empty()) {
    _internal_set_account_num(from._internal_account_num());
  }
  if (!from._internal_date_opened().empty()) {
    _internal_set_date_opened(from._internal_date_opened());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void bankAccount::CopyFrom(const bankAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankAccount.bankAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bankAccount::IsInitialized() const {
  return true;
}

void bankAccount::InternalSwap(bankAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ssn_, lhs_arena,
      &other->ssn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_num_, lhs_arena,
      &other->account_num_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_opened_, lhs_arena,
      &other->date_opened_, rhs_arena
  );
  swap(balance_, other->balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bankAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bank_5faccount_2eproto_getter, &descriptor_table_bank_5faccount_2eproto_once,
      file_level_metadata_bank_5faccount_2eproto[0]);
}

// ===================================================================

class Bank::_Internal {
 public:
};

Bank::Bank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accounts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:BankAccount.Bank)
}
Bank::Bank(const Bank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BankAccount.Bank)
}

inline void Bank::SharedCtor() {
}

Bank::~Bank() {
  // @@protoc_insertion_point(destructor:BankAccount.Bank)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Bank::ArenaDtor(void* object) {
  Bank* _this = reinterpret_cast< Bank* >(object);
  (void)_this;
}
void Bank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bank::Clear() {
// @@protoc_insertion_point(message_clear_start:BankAccount.Bank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .BankAccount.bankAccount accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BankAccount.Bank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BankAccount.bankAccount accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BankAccount.Bank)
  return target;
}

size_t Bank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BankAccount.Bank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BankAccount.bankAccount accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bank::GetClassData() const { return &_class_data_; }

void Bank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bank *>(to)->MergeFrom(
      static_cast<const Bank &>(from));
}


void Bank::MergeFrom(const Bank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BankAccount.Bank)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bank::CopyFrom(const Bank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BankAccount.Bank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bank::IsInitialized() const {
  return true;
}

void Bank::InternalSwap(Bank* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bank::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_bank_5faccount_2eproto_getter, &descriptor_table_bank_5faccount_2eproto_once,
      file_level_metadata_bank_5faccount_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BankAccount
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BankAccount::bankAccount* Arena::CreateMaybeMessage< ::BankAccount::bankAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BankAccount::bankAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::BankAccount::Bank* Arena::CreateMaybeMessage< ::BankAccount::Bank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BankAccount::Bank >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
